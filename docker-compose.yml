# Docker Compose configuration for PTR Tool Filter

services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ptr_qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC
    volumes:
      - ./qdrant_storage:/qdrant/storage:z
    environment:
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - ptr-network

  redis:
    image: redis:7.2-alpine
    container_name: ptr_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    networks:
      - ptr-network

  # Optional: RedisInsight for debugging
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: ptr_redisinsight
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - ./redisinsight:/db
    depends_on:
      - redis
    networks:
      - ptr-network

  # PTR Tool Filter API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ptr_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Override any environment variables here
      - QDRANT_HOST=qdrant
      - REDIS_HOST=redis
      - API_ENV=production
    env_file:
      - .env
    depends_on:
      - qdrant
      - redis
    volumes:
      # Mount source code for development (comment out for production)
      - ./src:/app/src:ro
      # Mount .env file
      - ./.env:/app/.env:ro
      # Mount toolbench data for evaluation
      - ./toolbench_data:/app/toolbench_data:ro
      # Mount evaluation results directory
      - ./evaluation_results:/app/evaluation_results
    networks:
      - ptr-network

networks:
  ptr-network:
    driver: bridge
